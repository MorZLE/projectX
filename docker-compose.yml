version: "2.1"
services:
  rabbitmq:
    image: rabbitmq:3.10.7-management
    container_name: server-rabbitmq
    hostname: rabbitmq
    env_file:
      - _rabbit.env
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
    ports:
      - 15672:15672
      - 5672:5672
    networks:
      - app
  server-produser:
    image: msrv-produser:${TAG:-latest}
    container_name: server-produser
    hostname: produser
    build:
      dockerfile: msrvs/msrv-produser/Dockerfile

    ports:
      - 8080:8080
    env_file:
      - msrvs/msrv-produser/_secret.env
    networks:
      - app
  bot:
    image: msrv-bot-tg:${TAG:-latest}
    container_name: server-bot
    hostname: bot
    build:
      dockerfile: msrvs/msrv-bot-tg/Dockerfile
    env_file:
      - msrvs/msrv-bot-tg/_secret.env
    networks:
      - app
  postgres:
    image: postgres:latest
    container_name: postgres_container
    env_file:
      - _postgres.env
    ports:
      - "5430:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user -d postgres_db" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
     - app
volumes:
  pgdata:
    driver: local

networks:
    app:
      driver: bridge


